#include <cmath>
#include <vector>
#include <Eigen/LU>
#include <Eigen/Dense>
#include <emscripten/emscripten.h>

#define K 6
#define D 12
#define PI 4*atan(1.0)

extern "C" {

  EMSCRIPTEN_KEEPALIVE
  float gaussian_a( Eigen::Matrix<float,D,1>& x ) {
    Eigen::Matrix<float,D,1> mu;
    Eigen::Matrix<float,D,D> sigma;

    mu << 1.145751,-1.537956,-1.579953,-0.725604,0.747127,-0.378058,-0.765814,0.216238,-1.449547,1.333694,-0.155456,-2.093934,-1.21933,1.398622,0.776002,1.131946,-1.307924,0.675664,0.969945,-0.627703,1.18733,-0.402423,0.524163,0.70665,0.844363,-0.841572,-1.739092,-0.922634,0.713331,-1.510055,-1.485037,0.113935,-1.276103,-1.28239,-1.2137,-1.248744,0.180443,0.136933,0.564111,0.486569,-0.061619,0.815585,-0.449734,0.918304,0.634015,-0.555223,0.903946,0.218809,1.442911,-0.728917,-1.079067,0.020629,2.123541,-0.975633,-1.134872,1.647025,-0.528619,-1.477288,0.65243,-0.194922,-0.45575,-0.058532,0.207376,-0.868868,-0.024815,-0.715779,0.872594,-1.225463,-0.507062,1.018918,-1.305008,0.604386;

    sigma << 0.007939,0.042177,0.198488,0.043559,0.026569,0.078583,1.078164,0.055095,0.020658,0.066176,0.227856,0.291652,0.021083,0.095431,0.260109,0.10684,0.337986,0.12622,0.180313,0.014077,0.162059,0.430417,0.128023,0.09642,0.006391,0.023761,0.012276,0.003272,0.014437,0.00893,0.017719,0.011316,0.256766,0.097487,0.019722,0.008266,0.919859,0.216941,0.208142,0.681703,0.643339,0.870051,0.19429,0.167474,0.186585,0.083751,0.244956,0.2006,0.000779,0.003753,0.002304,0.020203,0.005559,0.004402,0.011978,0.00078,0.047567,0.098018,0.032065,0.008588,0.110012,0.642765,0.254104,0.552078,0.102028,0.209446,0.189002,0.19336,0.214353,0.099446,0.053642,0.135632;

    return exp( -0.5 * ((x - mu).transpose()).dot( sigma.inverse() * (x - mu)) )
    / pow(sqrt(2 * PI), D) * sqrt(sigma.determinant());
  }

  EMSCRIPTEN_KEEPALIVE
  float gaussian_i( Eigen::Matrix<float,D,1>& x ) {
    Eigen::Matrix<float,D,1> mu;
    Eigen::Matrix<float,D,D> sigma;

    mu << 1.341348,-0.617973,-1.146543,0.185872,-0.017722,-0.918994,-0.626755,0.001902,-0.673318,0.917144,-0.749129,-0.033477,-0.85171,-0.463005,0.674262,-1.587803,0.803295,-0.834222,-0.361572,1.685798,-1.120789,1.462427,-0.844002,0.394176,1.44828,-1.885383,-0.646972,-0.556204,-1.16622,-1.276445,-1.621433,-0.350315,-0.978073,0.268262,-0.10042,-1.412595,-0.913876,-0.050013,0.691185,-0.044045,-0.002796,0.894881,0.410683,-0.316363,0.289055,-0.184841,0.182752,0.806018,0.152396,1.087382,0.366515,1.322082,-1.68801,1.555722,-0.976712,0.286295,1.114534,-1.609127,2.426886,-1.948349,0.364004,0.978034,-0.542651,0.908757,0.32788,0.16789,0.857639,-0.675878,0.744188,-0.698462,0.064819,0.080117;

    sigma << 0.009022,0.008207,0.002291,0.014902,0.027262,0.006404,0.035116,0.018626,0.011692,0.02687,0.01925,0.004841,0.029748,0.220711,0.210211,0.097711,0.227354,0.093496,0.519062,0.664543,0.340537,0.481399,0.048106,0.431423,0.005513,0.006298,0.132356,0.004552,0.034238,0.014935,0.207514,0.055591,0.009076,0.241264,0.09294,0.602736,0.084574,0.197528,0.896577,0.136052,1.050249,0.405673,0.522624,0.297455,0.453537,0.073058,0.087466,0.114422,0.007824,0.024158,0.265307,0.018431,0.039334,0.005535,0.132914,0.112741,0.007135,0.034887,0.039284,0.024511,0.66955,0.078617,0.843513,0.203711,0.587743,0.419956,0.083957,0.207288,0.529311,0.230563,1.299675,0.425677;

    return exp( -0.5 * ((x - mu).transpose()).dot( sigma.inverse() * (x - mu)) )
    / pow(sqrt(2 * PI), D) * sqrt(sigma.determinant());
  }

  EMSCRIPTEN_KEEPALIVE
  int gmm(std::vector<float> mspec) {

    Eigen::Matrix<float,D,1> x(mspec.data());

    float sa = 0.0, si = 0.0;
    for(int i=0; i<K; i++) {
      sa += gaussian_a(x);
      si += gaussian_i(x);
    }

    // 97: A, 105: I
    if(sa > si) return 97;
    return 105;
  }
}
